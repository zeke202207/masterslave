syntax = "proto3";

// Package NodeService provides services for managing nodes and executing jobs.
package MasterWorkerService;

// The request message for registering a node
message RegisterNodeRequest {
  // The node to register
  Node node = 1;
}

// The response message for registering a node
message RegisterNodeResponse {
  // Whether the operation was successful
  bool isSuccess = 1;
  string errorMessage = 2;
}

// The request message for unregistering a node
message UnregisterNodeRequest {
  // The node to unregister
  Node node = 1;
}

// The response message for unregistering a node
message UnregisterNodeResponse {
  // Whether the operation was successful
  bool isSuccess = 1;
  string errorMessage = 2;
}

// The request message for listening for a job
message ListenForJobRequest {
	string id = 1;
}

// The response message for listening for a job
message ListenForJobResponse {
  // The job to execute
  string jobId = 1 ;
  bytes data = 2;
}

// The Node message represents a node
message Node {
  string id = 1;
  bool isBusy = 2;
  int64 lastUsed = 3; // Timestamp in Unix epoch milliseconds
  // You can add more fields here to represent a node
}

// The Job message represents a job
message Job {
  string id = 1;
  // You can add more fields here to represent a job
}

// The request message for the heartbeat.
message HeartbeatRequest {
	string id = 1;
	int64 currentTime = 2;
}

// The response message for the heartbeat.
message HeartbeatResponse {
  // Whether the operation was successful
  bool isSuccess = 1;
  string errorMessage = 2;
}

// The request message for reporting status.
message WorkerInfoRequest {
	string id = 1;
	int64 currentTime = 2;
	string cpu = 3;
	string memory = 4;
}

// The response message for reporting status.
message WorkerInfoResponse {
  // Whether the operation was successful
  bool isSuccess = 1;
  string errorMessage = 2;
}

message ListenForResultRequest {
	string id =1;
	bytes result = 2;
}

message ListenForResultReponse{

}

// The NodeService provides methods for managing nodes and executing jobs
service MasterNodeService {
  // RegisterNode registers a node
  rpc RegisterNode (RegisterNodeRequest) returns (RegisterNodeResponse);
  // UnregisterNode unregisters a node
  rpc UnregisterNode (UnregisterNodeRequest) returns (UnregisterNodeResponse);
  // ListenForJob listens for a job from the server
  rpc ListenForJob (ListenForJobRequest) returns (stream ListenForJobResponse);
  rpc ListenForResult(stream ListenForResultRequest) returns (ListenForResultReponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  rpc WorkerInfo(WorkerInfoRequest) returns (WorkerInfoResponse);
}